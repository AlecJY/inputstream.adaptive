From 4d8e1fc1b6fac465a85921e2c041fdb7cc3e0076 Mon Sep 17 00:00:00 2001
From: Gilles Boccon-Gibod <bok@bok.net>
Date: Sun, 20 Mar 2022 15:45:57 -0700
Subject: [PATCH 13/13] fix #679

---
 Source/C++/Core/Ap4DvccAtom.cpp          | 22 +++++++++----------
 Source/C++/Core/Ap4DvccAtom.h            |  4 +++-
 Source/C++/Core/Ap4SampleDescription.cpp | 28 +++++++++++++-----------
 3 files changed, 29 insertions(+), 25 deletions(-)

diff --git a/Source/C++/Core/Ap4DvccAtom.cpp b/Source/C++/Core/Ap4DvccAtom.cpp
index 494036f..f5cc85c 100644
--- a/Source/C++/Core/Ap4DvccAtom.cpp
+++ b/Source/C++/Core/Ap4DvccAtom.cpp
@@ -127,18 +127,19 @@ AP4_DvccAtom::AP4_DvccAtom(AP4_UI08 dv_version_major,
 |   AP4_DvccAtom::GetCodecString
 +---------------------------------------------------------------------*/
 AP4_Result
-AP4_DvccAtom::GetCodecString(AP4_SampleDescription* parent, AP4_String& codec)
+AP4_DvccAtom::GetCodecString(const char* parent_codec_string,
+                             AP4_UI32    parent_format,
+                             AP4_String& codec)
 {
     char workspace[64];
     
-    AP4_UI32 format = parent->GetFormat();
-    if (format == AP4_ATOM_TYPE_DVAV ||
-        format == AP4_ATOM_TYPE_DVA1 ||
-        format == AP4_ATOM_TYPE_DVHE ||
-        format == AP4_ATOM_TYPE_DVH1) {
+    if (parent_format == AP4_ATOM_TYPE_DVAV ||
+        parent_format == AP4_ATOM_TYPE_DVA1 ||
+        parent_format == AP4_ATOM_TYPE_DVHE ||
+        parent_format == AP4_ATOM_TYPE_DVH1) {
         /* Non backward-compatible */
         char coding[5];
-        AP4_FormatFourChars(coding, format);
+        AP4_FormatFourChars(coding, parent_format);
         AP4_FormatString(workspace,
                          sizeof(workspace),
                          "%s.%02d.%02d",
@@ -148,7 +149,8 @@ AP4_DvccAtom::GetCodecString(AP4_SampleDescription* parent, AP4_String& codec)
         codec = workspace;
     } else {
         /* Backward-compatible */
-        switch (format) {
+        AP4_UI32 format = parent_format;
+        switch (parent_format) {
           case AP4_ATOM_TYPE_AVC1:
             format = AP4_ATOM_TYPE_DVA1;
             break;
@@ -167,12 +169,10 @@ AP4_DvccAtom::GetCodecString(AP4_SampleDescription* parent, AP4_String& codec)
         }
         char coding[5];
         AP4_FormatFourChars(coding, format);
-        AP4_String parent_codec;
-        parent->GetCodecString(parent_codec);
         AP4_FormatString(workspace,
                          sizeof(workspace),
                          "%s,%s.%02d.%02d",
-                         parent_codec.GetChars(),
+                         parent_codec_string,
                          coding,
                          GetDvProfile(),
                          GetDvLevel());
diff --git a/Source/C++/Core/Ap4DvccAtom.h b/Source/C++/Core/Ap4DvccAtom.h
index 3329cac..f1d2e68 100644
--- a/Source/C++/Core/Ap4DvccAtom.h
+++ b/Source/C++/Core/Ap4DvccAtom.h
@@ -92,7 +92,9 @@ public:
     AP4_UI08 GetDvBlSignalCompatibilityID() { return m_DvBlSignalCompatibilityID; }
 
     // helpers
-    AP4_Result GetCodecString(AP4_SampleDescription* parent, AP4_String& codec);
+    AP4_Result GetCodecString(const char* parent_codec_string,
+                              AP4_UI32    parent_format,
+                              AP4_String& codec);
 
 private:
     // members
diff --git a/Source/C++/Core/Ap4SampleDescription.cpp b/Source/C++/Core/Ap4SampleDescription.cpp
index ef5147c..247729f 100644
--- a/Source/C++/Core/Ap4SampleDescription.cpp
+++ b/Source/C++/Core/Ap4SampleDescription.cpp
@@ -399,12 +399,6 @@ AP4_AvcSampleDescription::AP4_AvcSampleDescription(AP4_UI32        format,
 +---------------------------------------------------------------------*/
 AP4_Result
 AP4_AvcSampleDescription::GetCodecString(AP4_String& codec) {
-    // Dolby Vision override
-    AP4_DvccAtom* dvcc = AP4_DYNAMIC_CAST(AP4_DvccAtom, m_Details.GetChild(AP4_ATOM_TYPE_DVCC));
-    if (dvcc) {
-        return dvcc->GetCodecString(this, codec);
-    }
-    
     char coding[5];
     AP4_FormatFourChars(coding, GetFormat());
     char workspace[64];
@@ -415,8 +409,15 @@ AP4_AvcSampleDescription::GetCodecString(AP4_String& codec) {
                      GetProfile(),
                      GetProfileCompatibility(),
                      GetLevel());
-    codec = workspace;
     
+    // Dolby Vision override
+    AP4_DvccAtom* dvcc = AP4_DYNAMIC_CAST(AP4_DvccAtom, m_Details.GetChild(AP4_ATOM_TYPE_DVCC));
+    if (dvcc) {
+        return dvcc->GetCodecString(workspace, GetFormat(), codec);
+    }
+
+    codec = workspace;
+
     return AP4_SUCCESS;
 }
 
@@ -609,12 +610,6 @@ ReverseBits(AP4_UI32 bits)
 +---------------------------------------------------------------------*/
 AP4_Result
 AP4_HevcSampleDescription::GetCodecString(AP4_String& codec) {
-    // Dolby Vision override
-    AP4_DvccAtom* dvcc = AP4_DYNAMIC_CAST(AP4_DvccAtom, m_Details.GetChild(AP4_ATOM_TYPE_DVCC));
-    if (dvcc) {
-        return dvcc->GetCodecString(this, codec);
-    }
-
     char coding[5];
     AP4_FormatFourChars(coding, GetFormat());
     char profile_space[2] = {0,0};
@@ -636,6 +631,13 @@ AP4_HevcSampleDescription::GetCodecString(AP4_String& codec) {
                      GetGeneralTierFlag()?'H':'L',
                      GetGeneralLevel(),
                      constraints);
+
+    // Dolby Vision override
+    AP4_DvccAtom* dvcc = AP4_DYNAMIC_CAST(AP4_DvccAtom, m_Details.GetChild(AP4_ATOM_TYPE_DVCC));
+    if (dvcc) {
+        return dvcc->GetCodecString(workspace, GetFormat(), codec);
+    }
+
     codec = workspace;
     
     return AP4_SUCCESS;
-- 
2.35.1

